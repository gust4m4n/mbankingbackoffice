{
  "info": {
    "name": "MBankingCore Admin API",
    "description": "🔧 **ADMIN-ONLY API Collection** for MBankingCore running on PORT 8080\n\n## 🎯 Admin Features Coverage:\n- ✅ Admin Authentication (Login/Logout)\n- ✅ Admin Dashboard with comprehensive statistics\n- ✅ Admin CRUD Management\n- ✅ Transaction Monitoring & Management\n- ✅ Transaction Reversal Operations\n- ✅ Configuration Management\n- ✅ Admin Content Management (Terms & Privacy Policy)\n- ✅ Audit Trails & Security Monitoring\n- ✅ User Management (Admin view)\n- ✅ Admin User Balance Top-up\n\n## 📊 Admin Dashboard Statistics:\n- 👥 Total Users: 6,067+\n- 👨‍💼 Total Admins: 50+\n- 💳 Total Transactions: 35,375+\n- 💰 Transaction Analytics by time periods\n- 📈 Performance metrics and trends\n\n## 🔐 Admin Authentication Flow:\n1. **Admin Login** → Submit admin credentials and get admin access_token\n2. **Get Dashboard** → View comprehensive system statistics\n3. **Access Admin Endpoints** → Full admin operations\n4. **Admin Logout** → Invalidate admin session\n\n## 🛠️ Admin Management Operations:\n- **Get All Admins** → List all administrators with pagination\n- **Get Admin by ID** → Retrieve specific admin details\n- **Create Admin** → Add new administrator account\n- **Update Admin** → Modify admin account details\n- **Delete Admin** → Remove administrator account\n\n## 💳 Transaction Management:\n- **Get All Transactions** → Monitor all user transactions with filtering\n- **Reverse Transaction** → Reverse any transaction type with reason\n- **Admin Topup User Balance** → Admin can top-up user balance directly\n- **Transaction Analytics** → View transaction trends and statistics\n\n## 👥 User Management (Admin Only):\n- **Get All Users** → List all users with advanced search and filtering\n- **Get User by ID** → Retrieve specific user details\n- **Admin Topup User Balance** → Top-up user balance with admin privileges\n\n## ⚙️ Configuration Management:\n- **Get All Configs** → List all system configuration values\n- **Get Config by Key** → Retrieve specific configuration value\n- **Set Config** → Create or update configuration values\n- **Delete Config** → Remove configuration values\n- **Admin Terms & Conditions** → Manage admin-specific terms and conditions\n- **Admin Privacy Policy** → Manage admin-specific privacy policy\n\n## 🔍 Audit & Security Monitoring:\n- **Get Audit Logs** → Review all system activities with filtering\n  - Filter by entity type (user, transaction, admin, etc.)\n  - Filter by action (CREATE, READ, UPDATE, DELETE)\n  - Filter by user/admin ID, date range, IP address\n  - Pagination support for large datasets\n- **Get Login Audit Logs** → Monitor authentication activities\n  - Filter by login type (user_login, admin_login, logout)\n  - Filter by status (success, failed, blocked)\n  - Device information and failure reasons\n\n## 🚨 Security Features:\n- JWT Token-based authentication\n- Role-based access control\n- Comprehensive audit trails\n- Failed login monitoring\n- IP address tracking\n- Device session management\n\n## ⚠️ Important Notes:\n- **Admin Token Required** → All endpoints require admin authentication\n- **Role Permissions** → Different admin roles may have different permissions\n- **Audit Compliance** → All admin actions are logged for security\n- **Rate Limiting** → Admin actions may be rate-limited for security\n\n## 🔧 Environment Variables Required:\n- `base_url` → Server base URL (http://localhost:8080)\n- `admin_email` → Admin email for login\n- `admin_password` → Admin password for login\n- `admin_token` → Admin access token (auto-set after login)\n- `admin_id` → Admin ID (auto-set after login)\n- `admin_role` → Admin role (auto-set after login)\n- `config_key` → Configuration key for config operations\n- `config_value` → Configuration value for config operations\n- `admin_terms_content` → Admin terms & conditions content\n- `admin_privacy_content` → Admin privacy policy content\n- `target_user_id` → User ID for admin operations (topup, etc.)\n- `topup_amount` → Amount to topup user balance\n- `topup_description` → Description for topup transaction\n\n## 📋 Testing Order:\n1. **Admin Authentication** → Login to get admin token\n2. **Dashboard Overview** → View system statistics\n3. **Admin Management** → CRUD operations on admin accounts\n4. **Configuration Management** → Manage system settings and content\n5. **Transaction Monitoring** → View and manage transactions\n6. **Admin User Balance Management** → Top-up user balances\n7. **Transaction Reversal** → Reverse transactions if needed\n8. **Audit Review** → Monitor system activities and security\n9. **Admin Logout** → Clean session termination",
    "_postman_id": "admin-api-collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "🔐 Admin Authentication",
      "description": "Admin login and logout operations",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has admin data and token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('admin');",
                  "    pm.expect(responseJson.data).to.have.property('access_token');",
                  "    pm.expect(responseJson.data).to.have.property('expires_in');",
                  "});",
                  "",
                  "// Save admin token",
                  "pm.test('Save admin token to environment', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.access_token) {",
                  "        pm.environment.set('admin_token', responseJson.data.access_token);",
                  "    }",
                  "    if (responseJson.data && responseJson.data.admin) {",
                  "        pm.environment.set('admin_id', responseJson.data.admin.id);",
                  "        pm.environment.set('admin_email', responseJson.data.admin.email);",
                  "        pm.environment.set('admin_role', responseJson.data.admin.role);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/login",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Admin Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms logout', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('logout');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "📊 Admin Dashboard",
      "description": "Admin dashboard with comprehensive system statistics",
      "item": [
        {
          "name": "Get Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has dashboard data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('total_users');",
                  "    pm.expect(responseJson.data).to.have.property('total_admins');",
                  "    pm.expect(responseJson.data).to.have.property('total_transactions');",
                  "    pm.expect(responseJson.data).to.have.property('topup_transactions');",
                  "    pm.expect(responseJson.data).to.have.property('withdraw_transactions');",
                  "    pm.expect(responseJson.data).to.have.property('transfer_transactions');",
                  "    pm.expect(responseJson.data).to.have.property('total_transactions_amount');",
                  "    pm.expect(responseJson.data).to.have.property('total_topup_amount');",
                  "    pm.expect(responseJson.data).to.have.property('total_transfer_amount');",
                  "});",
                  "",
                  "pm.test('Transaction data has time periods', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.total_transactions).to.have.property('today');",
                  "    pm.expect(responseJson.data.total_transactions).to.have.property('this_week');",
                  "    pm.expect(responseJson.data.total_transactions).to.have.property('this_month');",
                  "    pm.expect(responseJson.data.total_transactions).to.have.property('this_year');",
                  "    pm.expect(responseJson.data.total_transactions).to.have.property('all_time');",
                  "});",
                  "",
                  "pm.test('Dashboard data values are numeric', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.total_users).to.be.a('number');",
                  "    pm.expect(responseJson.data.total_admins).to.be.a('number');",
                  "    pm.expect(responseJson.data.total_transactions.today).to.be.a('number');",
                  "    pm.expect(responseJson.data.total_transactions.this_month).to.be.a('number');",
                  "    pm.expect(responseJson.data.total_transactions.this_year).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/dashboard",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "dashboard"]
            }
          },
          "response": [
            {
              "name": "Dashboard Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/dashboard",
                  "host": ["{{base_url}}"],
                  "path": ["api", "admin", "dashboard"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"code\": 200,\n  \"message\": \"Dashboard data retrieved successfully\",\n  \"data\": {\n    \"total_users\": 6067,\n    \"total_admins\": 50,\n    \"total_transactions\": {\n      \"today\": 125,\n      \"this_week\": 890,\n      \"this_month\": 3450,\n      \"this_year\": 18670,\n      \"all_time\": 35375\n    },\n    \"total_transactions_amount\": {\n      \"today\": 12500000,\n      \"this_week\": 89000000,\n      \"this_month\": 345000000,\n      \"this_year\": 1867000000,\n      \"all_time\": 3537500000\n    },\n    \"performance\": {\n      \"last_7_days\": [\n        { \"period\": \"Dec 26\", \"count\": 145, \"amount\": 14500000 },\n        { \"period\": \"Dec 27\", \"count\": 132, \"amount\": 13200000 },\n        { \"period\": \"Dec 28\", \"count\": 156, \"amount\": 15600000 },\n        { \"period\": \"Dec 29\", \"count\": 143, \"amount\": 14300000 },\n        { \"period\": \"Dec 30\", \"count\": 167, \"amount\": 16700000 },\n        { \"period\": \"Dec 31\", \"count\": 134, \"amount\": 13400000 },\n        { \"period\": \"Jan 01\", \"count\": 125, \"amount\": 12500000 }\n      ]\n    }\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "👨‍💼 Admin Management",
      "description": "CRUD operations for managing administrators",
      "item": [
        {
          "name": "Get All Admins",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has admins list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('admins');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "    pm.expect(responseJson.data).to.have.property('page');",
                  "    pm.expect(responseJson.data).to.have.property('per_page');",
                  "    pm.expect(responseJson.data.admins).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/admins?page=1&per_page=10&search={{admin_search}}&name={{admin_name_filter}}&email={{admin_email_filter}}&role={{admin_role_filter}}&status={{admin_status_filter}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admins"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "{{admin_search}}",
                  "description": "Search across name and email"
                },
                {
                  "key": "name",
                  "value": "{{admin_name_filter}}",
                  "description": "Filter by admin name"
                },
                {
                  "key": "email",
                  "value": "{{admin_email_filter}}",
                  "description": "Filter by admin email"
                },
                {
                  "key": "role",
                  "value": "{{admin_role_filter}}",
                  "description": "Filter by admin role"
                },
                {
                  "key": "status",
                  "value": "{{admin_status_filter}}",
                  "description": "Filter by status (active/inactive)"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Admin by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has admin data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('role');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/admins/{{admin_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admins", "{{admin_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Create Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has created admin data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('role');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "});",
                  "",
                  "// Save created admin ID for further testing",
                  "pm.test('Save created admin ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.id) {",
                  "        pm.environment.set('created_admin_id', responseJson.data.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{new_admin_name}}\",\n  \"email\": \"{{new_admin_email}}\",\n  \"password\": \"{{new_admin_password}}\",\n  \"role\": \"{{new_admin_role}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/admins",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admins"]
            }
          },
          "response": []
        },
        {
          "name": "Update Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated admin data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('role');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{updated_admin_name}}\",\n  \"email\": \"{{updated_admin_email}}\",\n  \"role\": \"{{updated_admin_role}}\",\n  \"status\": {{updated_admin_status}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/admins/{{created_admin_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admins", "{{created_admin_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms deletion', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/admins/{{created_admin_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admins", "{{created_admin_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "💳 Transaction Management",
      "description": "Admin transaction monitoring and management operations",
      "item": [
        {
          "name": "Get All Transactions (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Admin transaction data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('transactions');",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "    pm.expect(responseJson.data.transactions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Admin transaction records have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.transactions.length > 0) {",
                  "        const transaction = responseJson.data.transactions[0];",
                  "        pm.expect(transaction).to.have.property('id');",
                  "        pm.expect(transaction).to.have.property('user_id');",
                  "        pm.expect(transaction).to.have.property('user_name');",
                  "        pm.expect(transaction).to.have.property('type');",
                  "        pm.expect(transaction).to.have.property('amount');",
                  "        pm.expect(transaction).to.have.property('status');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/transactions?page={{admin_transaction_page}}&limit={{admin_transaction_limit}}&search={{transaction_search}}&user_name={{transaction_user_name_filter}}&description={{transaction_description_filter}}&type={{transaction_type_filter}}&status={{transaction_status_filter}}&user_id={{filter_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "{{admin_transaction_page}}"
                },
                {
                  "key": "limit",
                  "value": "{{admin_transaction_limit}}"
                },
                {
                  "key": "search",
                  "value": "{{transaction_search}}",
                  "description": "Search across user name, description, type, status"
                },
                {
                  "key": "user_name",
                  "value": "{{transaction_user_name_filter}}",
                  "description": "Filter by user name"
                },
                {
                  "key": "description",
                  "value": "{{transaction_description_filter}}",
                  "description": "Filter by transaction description"
                },
                {
                  "key": "type",
                  "value": "{{transaction_type_filter}}",
                  "description": "Filter by transaction type"
                },
                {
                  "key": "status",
                  "value": "{{transaction_status_filter}}",
                  "description": "Filter by transaction status"
                },
                {
                  "key": "user_id",
                  "value": "{{filter_user_id}}",
                  "description": "Filter by user ID (legacy)"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reverse Transaction (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Reversal data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('reversal_transaction');",
                  "    pm.expect(responseJson.data.reversal_transaction).to.have.property('id');",
                  "    pm.expect(responseJson.data.reversal_transaction).to.have.property('type');",
                  "    pm.expect(responseJson.data.reversal_transaction).to.have.property('original_txn_id');",
                  "    pm.expect(responseJson.data.reversal_transaction).to.have.property('reversal_reason');",
                  "});",
                  "",
                  "// Save reversal transaction ID for further testing",
                  "pm.test('Save reversal transaction ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.reversal_transaction) {",
                  "        pm.environment.set('reversal_transaction_id', responseJson.data.reversal_transaction.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"transaction_id\": \"{{transaction_id_to_reverse}}\",\n    \"reason\": \"{{reversal_reason}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/transactions/reversal",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "transactions", "reversal"]
            }
          },
          "response": []
        },
        {
          "name": "Admin Topup User Balance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Topup data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('transaction_id');",
                  "    pm.expect(responseJson.data).to.have.property('user_id');",
                  "    pm.expect(responseJson.data).to.have.property('user_name');",
                  "    pm.expect(responseJson.data).to.have.property('amount');",
                  "    pm.expect(responseJson.data).to.have.property('balance_before');",
                  "    pm.expect(responseJson.data).to.have.property('balance_after');",
                  "    pm.expect(responseJson.data).to.have.property('admin_id');",
                  "    pm.expect(responseJson.data).to.have.property('admin_name');",
                  "});",
                  "",
                  "pm.test('Balance calculation is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const amount = responseJson.data.amount;",
                  "    const balanceBefore = responseJson.data.balance_before;",
                  "    const balanceAfter = responseJson.data.balance_after;",
                  "    pm.expect(balanceAfter).to.equal(balanceBefore + amount);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": {{topup_amount}},\n    \"description\": \"{{topup_description}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{target_user_id}}/topup",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users", "{{target_user_id}}", "topup"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "⚙️ Configuration Management",
      "description": "Admin configuration management for system settings",
      "item": [
        {
          "name": "Get All Configs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has configs data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Config records have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const config = responseJson.data[0];",
                  "        pm.expect(config).to.have.property('key');",
                  "        pm.expect(config).to.have.property('value');",
                  "        pm.expect(config).to.have.property('created_at');",
                  "        pm.expect(config).to.have.property('updated_at');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/configs",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "configs"]
            }
          },
          "response": []
        },
        {
          "name": "Get Config by Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has config data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('key');",
                  "    pm.expect(responseJson.data).to.have.property('value');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/config/{{config_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "config", "{{config_key}}"]
            }
          },
          "response": []
        },
        {
          "name": "Set Config",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms config update', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key\": \"{{config_key}}\",\n  \"value\": \"{{config_value}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/config",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "config"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Config",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms config deletion', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/config/{{config_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "config", "{{config_key}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Admin Terms & Conditions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has admin terms & conditions', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('last_updated');",
                  "    pm.expect(responseJson.data.content).to.be.a('string');",
                  "    pm.expect(responseJson.data.content.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Content includes admin-specific terms', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = responseJson.data.content.toLowerCase();",
                  "    pm.expect(content).to.include('administrator');",
                  "    pm.expect(content).to.include('admin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/admin-terms-conditions",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admin-terms-conditions"]
            }
          },
          "response": []
        },
        {
          "name": "Set Admin Terms & Conditions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms admin terms update', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('successfully');",
                  "    pm.expect(responseJson.message).to.include('terms');",
                  "});",
                  "",
                  "pm.test('Response has updated content', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('last_updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"{{admin_terms_content}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/admin-terms-conditions",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admin-terms-conditions"]
            }
          },
          "response": []
        },
        {
          "name": "Get Admin Privacy Policy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has admin privacy policy', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('last_updated');",
                  "    pm.expect(responseJson.data.content).to.be.a('string');",
                  "    pm.expect(responseJson.data.content.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Content includes admin-specific privacy terms', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = responseJson.data.content.toLowerCase();",
                  "    pm.expect(content).to.include('administrator');",
                  "    pm.expect(content).to.include('admin');",
                  "    pm.expect(content).to.include('privacy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/admin-privacy-policy",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admin-privacy-policy"]
            }
          },
          "response": []
        },
        {
          "name": "Set Admin Privacy Policy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms admin privacy policy update', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('successfully');",
                  "    pm.expect(responseJson.message).to.include('privacy');",
                  "});",
                  "",
                  "pm.test('Response has updated content', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('last_updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"{{admin_privacy_content}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/admin-privacy-policy",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "admin-privacy-policy"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "🔍 Audit & Security",
      "description": "Audit trails and security monitoring for admin operations",
      "item": [
        {
          "name": "Get Audit Logs (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Audit logs data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('logs');",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "    pm.expect(responseJson.data.logs).to.be.an('array');",
                  "    ",
                  "    if (responseJson.data.logs.length > 0) {",
                  "        const log = responseJson.data.logs[0];",
                  "        pm.expect(log).to.have.property('id');",
                  "        pm.expect(log).to.have.property('entity_type');",
                  "        pm.expect(log).to.have.property('action');",
                  "        pm.expect(log).to.have.property('ip_address');",
                  "        pm.expect(log).to.have.property('created_at');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Pagination data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const pagination = responseJson.data.pagination;",
                  "    pm.expect(pagination).to.have.property('page');",
                  "    pm.expect(pagination).to.have.property('limit');",
                  "    pm.expect(pagination).to.have.property('total');",
                  "    pm.expect(pagination).to.have.property('total_pages');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/audit-logs?page={{audit_page}}&limit={{audit_limit}}&entity_type={{audit_entity_type}}&start_date={{audit_start_date}}&end_date={{audit_end_date}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "audit-logs"],
              "query": [
                {
                  "key": "page",
                  "value": "{{audit_page}}"
                },
                {
                  "key": "limit",
                  "value": "{{audit_limit}}"
                },
                {
                  "key": "entity_type",
                  "value": "{{audit_entity_type}}"
                },
                {
                  "key": "user_id",
                  "value": "{{audit_user_id}}",
                  "disabled": true
                },
                {
                  "key": "admin_id",
                  "value": "{{audit_admin_id}}",
                  "disabled": true
                },
                {
                  "key": "action",
                  "value": "{{audit_action}}",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "{{audit_start_date}}"
                },
                {
                  "key": "end_date",
                  "value": "{{audit_end_date}}"
                },
                {
                  "key": "ip_address",
                  "value": "{{audit_ip_address}}",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Login Audit Logs (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Login audit logs data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('logs');",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "    pm.expect(responseJson.data.logs).to.be.an('array');",
                  "    ",
                  "    if (responseJson.data.logs.length > 0) {",
                  "        const log = responseJson.data.logs[0];",
                  "        pm.expect(log).to.have.property('id');",
                  "        pm.expect(log).to.have.property('login_type');",
                  "        pm.expect(log).to.have.property('status');",
                  "        pm.expect(log).to.have.property('ip_address');",
                  "        pm.expect(log).to.have.property('created_at');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Pagination data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const pagination = responseJson.data.pagination;",
                  "    pm.expect(pagination).to.have.property('page');",
                  "    pm.expect(pagination).to.have.property('limit');",
                  "    pm.expect(pagination).to.have.property('total');",
                  "    pm.expect(pagination).to.have.property('total_pages');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/login-audits?page={{login_audit_page}}&limit={{login_audit_limit}}&login_type={{login_audit_type}}&status={{login_audit_status}}&start_date={{login_audit_start_date}}&end_date={{login_audit_end_date}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "login-audits"],
              "query": [
                {
                  "key": "page",
                  "value": "{{login_audit_page}}"
                },
                {
                  "key": "limit",
                  "value": "{{login_audit_limit}}"
                },
                {
                  "key": "login_type",
                  "value": "{{login_audit_type}}"
                },
                {
                  "key": "status",
                  "value": "{{login_audit_status}}"
                },
                {
                  "key": "user_id",
                  "value": "{{login_audit_user_id}}",
                  "disabled": true
                },
                {
                  "key": "admin_id",
                  "value": "{{login_audit_admin_id}}",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "{{login_audit_start_date}}"
                },
                {
                  "key": "end_date",
                  "value": "{{login_audit_end_date}}"
                },
                {
                  "key": "ip_address",
                  "value": "{{login_audit_ip_address}}",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "collection_version",
      "value": "1.1.0",
      "type": "string"
    },
    {
      "key": "admin_endpoints",
      "value": "20",
      "type": "string"
    },
    {
      "key": "collection_type",
      "value": "admin-only",
      "type": "string"
    },
    {
      "key": "config_key",
      "value": "app_name",
      "type": "string"
    },
    {
      "key": "config_value",
      "value": "MBankingCore",
      "type": "string"
    },
    {
      "key": "admin_terms_content",
      "value": "Updated Admin Terms and Conditions for MBankingCore Administration Panel...",
      "type": "string"
    },
    {
      "key": "admin_privacy_content",
      "value": "Updated Admin Privacy Policy for MBankingCore Administration Panel...",
      "type": "string"
    }
  ]
}
